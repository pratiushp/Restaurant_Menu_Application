/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cw.GUI;

import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author binayak
 */
public class FoodMenuIS extends javax.swing.JFrame {

    ArrayList<String[]> food = new ArrayList<>();

    ArrayList<Integer> FoodIdList = new ArrayList<Integer>();

    //ArrayList<Model> modelList=new ArrayList<Model>();
    /**
     * Creates new form FoodMenuIS
     */
    public FoodMenuIS() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgSpiciness = new javax.swing.ButtonGroup();
        Title = new javax.swing.JLabel();
        TablePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMenu = new javax.swing.JTable();
        AddPanel = new javax.swing.JPanel();
        Category = new javax.swing.JLabel();
        FoodName = new javax.swing.JLabel();
        FoodID = new javax.swing.JLabel();
        Spiciness = new javax.swing.JLabel();
        Price = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        txtFoodPrice = new javax.swing.JTextField();
        txtFoodID = new javax.swing.JTextField();
        txtFoodName = new javax.swing.JTextField();
        cmboxCategory = new javax.swing.JComboBox<>();
        rbtnMild = new javax.swing.JRadioButton();
        rbtnMedium = new javax.swing.JRadioButton();
        rbtnHot = new javax.swing.JRadioButton();
        rbtnExtraHot = new javax.swing.JRadioButton();
        SearchPanel = new javax.swing.JPanel();
        SPrice = new javax.swing.JLabel();
        txtSPrice = new javax.swing.JTextField();
        btnCategorySearch = new javax.swing.JButton();
        cmboxSCategory = new javax.swing.JComboBox<>();
        SCategory = new javax.swing.JLabel();
        btnPriceSearch = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        MenuBar = new javax.swing.JMenuBar();
        MenuFile = new javax.swing.JMenu();
        MenuItemImport = new javax.swing.JMenuItem();
        MenuItemClear = new javax.swing.JMenuItem();
        MenuItemExit = new javax.swing.JMenuItem();
        MenuHelp = new javax.swing.JMenu();
        MenuItemSupport = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(java.awt.Color.white);
        setName("Food Menu IS"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1000, 700));
        setResizable(false);

        Title.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        Title.setText("TINY PEBBLES FOOD MENU");

        TablePanel.setBackground(new java.awt.Color(216, 185, 255));
        TablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "MENU DETAILS", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14))); // NOI18N

        tblMenu.setAutoCreateRowSorter(true);
        tblMenu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Food ID", "Food Name", "Category", "Spiciness", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMenu.setEnabled(false);
        jScrollPane1.setViewportView(tblMenu);
        if (tblMenu.getColumnModel().getColumnCount() > 0) {
            tblMenu.getColumnModel().getColumn(0).setResizable(false);
            tblMenu.getColumnModel().getColumn(0).setPreferredWidth(70);
            tblMenu.getColumnModel().getColumn(1).setResizable(false);
            tblMenu.getColumnModel().getColumn(1).setPreferredWidth(140);
            tblMenu.getColumnModel().getColumn(2).setResizable(false);
            tblMenu.getColumnModel().getColumn(2).setPreferredWidth(90);
            tblMenu.getColumnModel().getColumn(3).setResizable(false);
            tblMenu.getColumnModel().getColumn(3).setPreferredWidth(100);
            tblMenu.getColumnModel().getColumn(4).setResizable(false);
            tblMenu.getColumnModel().getColumn(4).setPreferredWidth(55);
        }

        javax.swing.GroupLayout TablePanelLayout = new javax.swing.GroupLayout(TablePanel);
        TablePanel.setLayout(TablePanelLayout);
        TablePanelLayout.setHorizontalGroup(
            TablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        TablePanelLayout.setVerticalGroup(
            TablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TablePanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        AddPanel.setBackground(new java.awt.Color(110, 235, 156));
        AddPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ADD FOOD ITEM", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14))); // NOI18N

        Category.setText("Category");

        FoodName.setText("Food Name");

        FoodID.setText("Food ID");

        Spiciness.setText("Spiciness");

        Price.setText("Price");

        btnAdd.setBackground(new java.awt.Color(255, 255, 255));
        btnAdd.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnAdd.setText("Add To Menu");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        cmboxCategory.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmboxCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose", "Veg", "Chicken", "Buff", "Mutton", "Salad" }));
        cmboxCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxCategoryActionPerformed(evt);
            }
        });

        bgSpiciness.add(rbtnMild);
        rbtnMild.setText("Mild");
        rbtnMild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnMildActionPerformed(evt);
            }
        });

        bgSpiciness.add(rbtnMedium);
        rbtnMedium.setText("Medium");
        rbtnMedium.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnMediumActionPerformed(evt);
            }
        });

        bgSpiciness.add(rbtnHot);
        rbtnHot.setText("Hot");
        rbtnHot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnHotActionPerformed(evt);
            }
        });

        bgSpiciness.add(rbtnExtraHot);
        rbtnExtraHot.setText("Extra Hot");
        rbtnExtraHot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnExtraHotActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout AddPanelLayout = new javax.swing.GroupLayout(AddPanel);
        AddPanel.setLayout(AddPanelLayout);
        AddPanelLayout.setHorizontalGroup(
            AddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(FoodName, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(FoodID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Category, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Spiciness, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Price, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtFoodName)
                        .addComponent(txtFoodID)
                        .addComponent(cmboxCategory, 0, 150, Short.MAX_VALUE))
                    .addGroup(AddPanelLayout.createSequentialGroup()
                        .addComponent(rbtnMild, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbtnMedium)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbtnHot)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbtnExtraHot))
                    .addComponent(txtFoodPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(86, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        AddPanelLayout.setVerticalGroup(
            AddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(AddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FoodID, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFoodID, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(AddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FoodName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFoodName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(AddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Category, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmboxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(AddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Spiciness, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbtnMild)
                    .addComponent(rbtnMedium)
                    .addComponent(rbtnHot)
                    .addComponent(rbtnExtraHot))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(AddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Price, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFoodPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        SearchPanel.setBackground(new java.awt.Color(110, 218, 235));
        SearchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SEARCH", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14))); // NOI18N

        SPrice.setText("Price");

        txtSPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSPriceActionPerformed(evt);
            }
        });

        btnCategorySearch.setBackground(new java.awt.Color(255, 255, 255));
        btnCategorySearch.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnCategorySearch.setText("Food Available in Category");
        btnCategorySearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCategorySearchActionPerformed(evt);
            }
        });

        cmboxSCategory.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmboxSCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose", "Veg", "Chicken", "Buff", "Mutton", "Salad" }));

        SCategory.setText("Category");

        btnPriceSearch.setBackground(new java.awt.Color(255, 255, 255));
        btnPriceSearch.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnPriceSearch.setText("Search Food");
        btnPriceSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPriceSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SearchPanelLayout = new javax.swing.GroupLayout(SearchPanel);
        SearchPanel.setLayout(SearchPanelLayout);
        SearchPanelLayout.setHorizontalGroup(
            SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(SearchPanelLayout.createSequentialGroup()
                        .addComponent(SCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmboxSCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SearchPanelLayout.createSequentialGroup()
                        .addComponent(SPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSPrice)))
                .addGap(18, 18, 18)
                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCategorySearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnPriceSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        SearchPanelLayout.setVerticalGroup(
            SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SearchPanelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPriceSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmboxSCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCategorySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 19, Short.MAX_VALUE))
        );

        btnClear.setBackground(new java.awt.Color(255, 255, 255));
        btnClear.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnExit.setBackground(new java.awt.Color(255, 255, 255));
        btnExit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        MenuFile.setText("File");

        MenuItemImport.setText("Import");
        MenuItemImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemImportActionPerformed(evt);
            }
        });
        MenuFile.add(MenuItemImport);

        MenuItemClear.setText("Clear");
        MenuItemClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemClearActionPerformed(evt);
            }
        });
        MenuFile.add(MenuItemClear);

        MenuItemExit.setText("Exit   ");
        MenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemExitActionPerformed(evt);
            }
        });
        MenuFile.add(MenuItemExit);

        MenuBar.add(MenuFile);

        MenuHelp.setText("Help");
        MenuHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuHelpActionPerformed(evt);
            }
        });

        MenuItemSupport.setText("Support");
        MenuItemSupport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemSupportActionPerformed(evt);
            }
        });
        MenuHelp.add(MenuItemSupport);

        MenuBar.add(MenuHelp);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(298, 298, 298)
                .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(TablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(130, 130, 130)
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AddPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AddPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SearchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(TablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 78, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MenuItemImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemImportActionPerformed

        // TODO add your handling code here:
        JFileChooser choose = new JFileChooser();
        choose.showOpenDialog(null);
        try {
            File file = choose.getSelectedFile();

            String filePath = file.getAbsolutePath();

            BufferedReader br = new BufferedReader(new FileReader(file));
            String firstLine = br.readLine().trim();
            String[] columnName = firstLine.split(",");
            DefaultTableModel model = (DefaultTableModel) tblMenu.getModel();
            model.setColumnIdentifiers(columnName);

            Object[] tableLines = br.lines().toArray();
            String[] dataRow = new String[tableLines.length];
            for (int i = 1; i < tableLines.length; i++) {
                String line = tableLines[i].toString().trim();
                dataRow = line.split(",");
                model.addRow(dataRow);
                food.add(dataRow);
            }
        }
         catch(IOException ex){
            JOptionPane.showMessageDialog(null,
                    "Please Select a valid File", "Import Incomplete",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_MenuItemImportActionPerformed
    
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        String foodID = "";
        String foodname = txtFoodName.getText().trim();
        String category = cmboxCategory.getSelectedItem().toString();
        String spiciness = "";
        String foodprice = txtFoodPrice.getText().trim();
        int foodId;

        //Validation for Food ID
        if (txtFoodID.getText().trim().length() <= 0) {
            JOptionPane.showMessageDialog(null,
                    "Food ID cannot be empty!", "Please Enter Food ID",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            foodID = txtFoodID.getText().trim();
            try {
                foodId = Integer.parseInt(foodID);
                if (foodId < 0) {
                    JOptionPane.showMessageDialog(null,
                            "Food ID cannot be negative!",
                            "Please Enter Positive Food ID",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                } else {
                    //TO check repeated entry
                    for (int i = 0; i <= FoodIdList.size() - 1; i++) {
                        //System.out.println(FoodIdList.get(i));
                        if (foodId == FoodIdList.get(i)) {
                            JOptionPane.showMessageDialog(null,
                                    "Food ID Already Entered",
                                    "Invalid Input",
                                    JOptionPane.ERROR_MESSAGE);
                            ((DefaultTableModel) tblMenu.getModel()).removeRow(FoodIdList.size() - i);
                            break;
                        }
                    }
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null,
                        "Food ID must be an Integer", "Please Enter a numeric value",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

        }

        //Validation for Food Name
        if (foodname.isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "Food Name cannot be Empty!", "Please Enter Food Name",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Validation for Price
        if (txtFoodPrice.getText().trim().length() <= 0) {
            JOptionPane.showMessageDialog(null,
                    "The price cannot be empty.", "Please Enter Price of the Food",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            foodprice = txtFoodPrice.getText().trim();
        }

        //Validation for Category
        if (!category.matches("Choose")) {
        } else {
            JOptionPane.showMessageDialog(null,
                    "Category must be selected", "Category Required",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Validation for Spiceness
        if (rbtnMild.isSelected()) {
            spiciness = rbtnMild.getText();
        } else if (rbtnMedium.isSelected()) {
            spiciness = rbtnMedium.getText();
        } else if (rbtnHot.isSelected()) {
            spiciness = rbtnHot.getText();
        } else if (rbtnExtraHot.isSelected()) {
            spiciness = rbtnExtraHot.getText();
        } else {
            JOptionPane.showMessageDialog(null,
                    "Please select the prefered level of Spiceness", "Spiceness not Selected",
                    JOptionPane.ERROR_MESSAGE);

            return;
        }

        //Adding the valid values to the table
        String[] values = {foodID, foodname, category, spiciness, foodprice};
        food.add(values);
        DefaultTableModel model = (DefaultTableModel) tblMenu.getModel();
        model.addRow(values);

        FoodIdList.add(foodId);

        //to clear the textfields
        txtFoodID.setText("");
        txtFoodName.setText("");
        txtFoodPrice.setText("");
        bgSpiciness.clearSelection();
        cmboxCategory.setSelectedIndex(0);

        JOptionPane.showMessageDialog(null,
                "Values successfully added to the Table!", "Food added to the Menu",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnAddActionPerformed

    private void rbtnMildActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnMildActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbtnMildActionPerformed

    private void rbtnMediumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnMediumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbtnMediumActionPerformed

    private void rbtnHotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnHotActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbtnHotActionPerformed

    private void rbtnExtraHotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnExtraHotActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbtnExtraHotActionPerformed

    private void txtSPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSPriceActionPerformed

    private void btnPriceSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPriceSearchActionPerformed
        // TODO add your handling code here:
        String searchPrice = txtSPrice.getText();
        System.out.println("foodSize" + food.size());
        try {
            if (searchPrice.isEmpty()) {
                JOptionPane.showMessageDialog(null,
                        "Price Required", "Price not Entered",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                int searchValue = Integer.parseInt(searchPrice);

                //Selection Sort
                for (int i = 0; i < food.size() - 1; i++) {
                    int minPriceIndex = i;
                    for (int j = i + 1; j < food.size(); j++) {
                        int currentValue = Integer.parseInt(food.get(j)[4]);
                        int minValue = Integer.parseInt(food.get(minPriceIndex)[4]);
                        if (currentValue < minValue) {
                            //minPrice = currentValue; 
                            minPriceIndex = j;
                        }
                    }
                    if (i != minPriceIndex) {
                        String[] temp = food.get(i);
                        food.set(i, food.get(minPriceIndex));
                        food.set(minPriceIndex, temp);
                    }
                }
                for (String[] a : food) {
                    for (String x : a) {
                        System.out.print("food" + x + " ");

                    }
                    System.out.println();
                }

                //Binary Search
                int low = 0;
                int high = food.size() - 1;

                int mid = 0;
                int currentValue = 0;
                boolean found = false;

                while (low <= high) {
                    mid = (low + high) / 2;
                    currentValue = Integer.parseInt(food.get(mid)[4]);
                    if (searchValue == currentValue) {
                        found = true;
                        break;
                    } else if (searchValue > currentValue) {
                        low = mid + 1;
                    } else {
                        high = mid - 1;
                    }
                }

                if (found) {
                    String[] data = food.get(mid);
                    String result = "";

                    result += "Food ID: " + data[0] + "\n";
                    result += "Food Name: " + data[1] + "\n";
                    result += "Category: " + data[2] + "\n";
                    result += "Spiciness: " + data[3] + "\n";
                    result += "Price: " + data[4] + "\n";
                    JOptionPane.showMessageDialog(null, result,
                            "Food Found", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "No Food Item Found" + searchValue,
                            "Food Item Not Found", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null,
                    "Cannot search an empty table.");

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null,
                    "Price should be in integer format.");
        }
    }//GEN-LAST:event_btnPriceSearchActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        txtFoodID.setText("");
        txtFoodName.setText("");
        txtFoodPrice.setText("");
        cmboxCategory.setSelectedIndex(0);
        bgSpiciness.clearSelection();

        JOptionPane.showMessageDialog(null,
                "All the fields have been cleared.", "Values Cleared",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void MenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_MenuItemExitActionPerformed

    private void MenuItemClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemClearActionPerformed
        // TODO add your handling code here:
        txtFoodID.setText("");
        txtFoodName.setText("");
        txtFoodPrice.setText("");
        cmboxCategory.setSelectedIndex(0);
        bgSpiciness.clearSelection();

        JOptionPane.showMessageDialog(null,
                "All the fields have been cleared.", "Values Cleared",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_MenuItemClearActionPerformed

    private void btnCategorySearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCategorySearchActionPerformed
        // TODO add your handling code here:
/*
        String searchCategory = cmboxSCategory.getSelectedItem().toString();

        System.out.println("foodSize" + food.size());
        try {
            if (searchCategory.matches("Choose")) {
                JOptionPane.showMessageDialog(null,
                        "Please Choose a Category", "Category Required",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } else {

                int searchValue = searchCategory.length();

                //Selection Sort
                for (int i = 0; i < food.size() - 1; i++) {
                    int minPriceIndex = i;
                    for (int j = i + 1; j < food.size(); j++) {
                        int currentValue = (food.get(j)[2]).length();
                        int minValue = (food.get(minPriceIndex)[2]).length();
                        if (currentValue < minValue) {
                            //minPrice = currentValue; 
                            minPriceIndex = j;
                        } else if (currentValue == minValue) {

                        }
                    }
                    if (i != minPriceIndex) {
                        String[] temp = food.get(i);
                        food.set(i, food.get(minPriceIndex));
                        food.set(minPriceIndex, temp);
                    }
                }
                for (String a[] : food) {
                    for (String x : a) {
                        System.out.print("Category" + x + " ");

                    }
                    System.out.println();
                }

                //Binary Search
                int low = 0;
                int high = food.size() - 1;

                int mid = 0;
                int currentValue = 0;
                boolean found = false;
                ArrayList<Integer> out1 =new ArrayList<>();
                while (low <= high) {
                    mid = (low + high) / 2;
                    currentValue = (food.get(mid)[2]).length();
                    if (searchValue == currentValue) {
                        found = true;
                        out1.add(mid);
                        low=mid+1;
                        for(int i=mid+1;i<=high;i++){
                            if(searchValue==(food.get(i)[2]).length()){
                                out1.add(i);
                            }
                            else{
                                break;
                            }
                        }
                        break;
                        /*if((food.get(high)[2]).length()==searchValue){
                            out1.add(mid);   
                        }else if(high==mid){
                            break;
                        }
                        high=-1;
                        
                    } else if (searchValue > currentValue) {
                        low = mid + 1;
                    } else {
                        high = mid - 1;
                    }
                    
                }
                
                for (int a : out1) {
                    
                    System.out.print("output" + a + " "+out1.size());
                   
                    System.out.println();
                }
                
                if (found) {
                    String result = "";
                    for(int i=0;i<out1.size();i++){
                   
                    String[] data = food.get(i);
                    
                    result += "Food ID: " + data[0] + "\n";
                    result += "Food Name: " + data[1] + "\n";
                    result += "Category: " + data[2] + "\n";
                    result += "Spiciness: " + data[3] + "\n";
                    result += "Price: " + data[4] + "\n";
                    }
                    JOptionPane.showMessageDialog(null, result,
                            "Food Found", JOptionPane.INFORMATION_MESSAGE);
                    
                } else {
                    JOptionPane.showMessageDialog(null, "No Food Item Found in " + searchCategory + " category" + searchValue,
                            "Food Item Not Found", JOptionPane.ERROR_MESSAGE);
                }
                
            }

        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null,
                    "Error Found! Please Try Again","Error Message",
                    JOptionPane.ERROR_MESSAGE);
        }
        catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null,
                    "Error Found! Please Try Again","Error Message",
                    JOptionPane.ERROR_MESSAGE);
        }
        */

        
        
        String Scategory = cmboxSCategory.getSelectedItem().toString();
        String foods = "";
        int count = 0;
        
        if (!Scategory.matches("Choose")) {
            int rowCount1 = tblMenu.getRowCount();
            for (int i = 0; i < rowCount1; i++) {
                String r = (String) tblMenu.getValueAt(i, 2);
                if (Scategory.equals(r)) {
                    String a = (String) tblMenu.getValueAt(i, 1);
                    foods = foods + a + ',';
                    count = count + 1;
                }
            }
            
            if (foods != "") {
                JOptionPane.showMessageDialog(null, "Number of Dishes in " + Scategory
                        + " equals: " + count + "\n" + "The dishes in this category are: " + foods,
                        "", JOptionPane.INFORMATION_MESSAGE);

            } else {
                JOptionPane.showMessageDialog(null,
                        "The dishes in this category are currently unavailable ",
                        "Dishes not availabe", JOptionPane.WARNING_MESSAGE);
            }
            
        } else {

            JOptionPane.showMessageDialog(getContentPane(),
                    "Category not selected", "Please select a category",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCategorySearchActionPerformed

    private void cmboxCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmboxCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmboxCategoryActionPerformed

    private void MenuHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuHelpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MenuHelpActionPerformed

    private void MenuItemSupportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemSupportActionPerformed
        // TODO add your handling code here:
        try {
            JFileChooser choose = new JFileChooser();
            int i = choose.showOpenDialog(null);
            if (i == JFileChooser.APPROVE_OPTION) {
                File file = choose.getSelectedFile();
                if (Desktop.isDesktopSupported()) {
                    Desktop.getDesktop().open(file);
                } else {
                    JOptionPane.showMessageDialog(this,
                            "File not found");
                }
            }  else {
                JOptionPane.showMessageDialog(this,
                        "File not found");
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this,
                    "File not found");

        }
    }//GEN-LAST:event_MenuItemSupportActionPerformed

    //Selection Sort 
    public class SelectionSort {

        private ArrayList<Integer> inputArray = new ArrayList<Integer>();

        //Just To fetch display purpose
        public ArrayList<Integer> getSortedArray() {
            return inputArray;
        }

        public SelectionSort(ArrayList<Integer> inputArray) {
            this.inputArray = inputArray;
        }

        public void sortGivenArray() {

            int smallInt = 0;
            int j = 0;
            int smallIntIndex = 0;

            for (int i = 1; i < inputArray.size(); i++) {

                smallInt = inputArray.get(i - 1);
                smallIntIndex = i - 1;

                for (j = i; j < inputArray.size(); j++) {
                    if (inputArray.get(j) < smallInt) {
                        smallInt = inputArray.get(j);
                        smallIntIndex = j;
                    }
                }

                //Swap the smallest element with the first element of unsorted subarray
                swap(i - 1, smallIntIndex);
            }
        }

        public void swap(int sourceIndex, int destIndex) {
            int temp = inputArray.get(destIndex);
            inputArray.set(destIndex, inputArray.get(sourceIndex));
            inputArray.set(sourceIndex, temp);
        }
    }

//Binary Search 
    public static int binarySearch(ArrayList<Integer> price, int low, int high, int key) {
        if (low <= high) {
            int mid = (low + high) / 2;
            if (price.get(mid).equals(key)) {
                return mid;
            } else if (key < 0) {
                return binarySearch(price, low, mid - 1, key);

            } else {
                return binarySearch(price, mid + 1, high, key);
            }
        } else {
            return -1;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FoodMenuIS.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FoodMenuIS.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FoodMenuIS.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FoodMenuIS.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FoodMenuIS().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AddPanel;
    private javax.swing.JLabel Category;
    private javax.swing.JLabel FoodID;
    private javax.swing.JLabel FoodName;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenu MenuFile;
    private javax.swing.JMenu MenuHelp;
    private javax.swing.JMenuItem MenuItemClear;
    private javax.swing.JMenuItem MenuItemExit;
    private javax.swing.JMenuItem MenuItemImport;
    private javax.swing.JMenuItem MenuItemSupport;
    private javax.swing.JLabel Price;
    private javax.swing.JLabel SCategory;
    private javax.swing.JLabel SPrice;
    private javax.swing.JPanel SearchPanel;
    private javax.swing.JLabel Spiciness;
    private javax.swing.JPanel TablePanel;
    private javax.swing.JLabel Title;
    private javax.swing.ButtonGroup bgSpiciness;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCategorySearch;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnPriceSearch;
    private javax.swing.JComboBox<String> cmboxCategory;
    private javax.swing.JComboBox<String> cmboxSCategory;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton rbtnExtraHot;
    private javax.swing.JRadioButton rbtnHot;
    private javax.swing.JRadioButton rbtnMedium;
    private javax.swing.JRadioButton rbtnMild;
    private javax.swing.JTable tblMenu;
    private javax.swing.JTextField txtFoodID;
    private javax.swing.JTextField txtFoodName;
    private javax.swing.JTextField txtFoodPrice;
    private javax.swing.JTextField txtSPrice;
    // End of variables declaration//GEN-END:variables
}
